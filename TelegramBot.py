from email import message
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from ChatGPT import ChatGPT
from DataBase import DataBase
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Dispatcher
import asyncio
from lang import *

class TelegramBot:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self, api_key_tg, api_keys_gpt, database_file, name_bot_command):
        self.bot = Bot(token=api_key_tg)
        self.chatgpt = ChatGPT(api_keys_gpt)
        self.database = DataBase(database_file)
        self.dp = Dispatcher(self.bot)
        self.name_bot_command = name_bot_command


        self.dp.message_handler(commands=["start"])(self.process_start_command)
        self.dp.message_handler(commands=["info"])(self.info_command_handler)
        self.dp.message_handler(commands=["help"])(self.help_command_handler)
        self.dp.message_handler(commands=["pay"])(self.pay_command_handler)
        self.dp.message_handler(commands=["admin"])(self.admin_command_handler)
        self.dp.message_handler(commands=["test"])(self.test_command_handler)
        self.dp.message_handler()(self.echo_message)
        self.dp.callback_query_handler(lambda call: call.data == 'admin_give_money')(self.admin_give_money)
        self.dp.callback_query_handler(lambda call: call.data == 'admin_add_tokens')(self.admin_add_tokens)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        executor.start_polling(self.dp)

    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    def RegisterUser(self, username, userid, firstname, lastname, banned=0, is_spam=1, balance=10, lang='ru', tokens=100, ratings=0):
        try:
            userdata = self.database.query(f"SELECT * FROM users WHERE userid='{userid}'")
            if len(userdata) <= 0:
                self.database.query(f"INSERT INTO users (username, userid, firstname, lastname, banned, is_spam) VALUES('{username}', '{userid}', '{firstname}', '{lastname}', {banned}, {is_spam})", commit=True)
                self.database.query(f"INSERT INTO settings (userid, balance, lang, tokens, ratings) VALUES('{userid}', {balance}, '{lang}', {tokens}, {ratings})", commit=True)
                return True
            return False
        except:
            return False

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    def CheckUser(self, userid):
        userdata = self.database.query(f"SELECT * FROM users WHERE userid='{userid}'")
        if len(userdata) <= 0:
            return False
        else:
            return True

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    def CheckTokens(self, userid, text):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid='{userid}'")

        tokens = text.split()
        num_tokens = len(tokens)

        if num_tokens > userdata["tokens"]:
            return False

        balance = userdata["balance"]
        new_balance = round(balance - num_tokens/10, 2) # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        if new_balance < 0:
            return False

        self.database.query(f"UPDATE settings SET tokens={int(userdata['tokens']) - num_tokens}, balance={new_balance} WHERE userid='{userid}'", commit=True)
        return True

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    async def process_start_command(self, message: types.Message):
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        await self.bot.send_message(userid, lang['RU_COMMAND_START'].format(bot_name=self.name_bot_command,
                                    parse_mode='HTML'),
                                    )


    # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /info
    async def info_command_handler(self, message: types.Message):
        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if (settings_user["error"]):
            settings_user = settings_user["result"]
        else:
            return

        balance = settings_user["balance"]
        lang = settings_user["lang"]
        tokens = settings_user["tokens"]
        ratings = settings_user ["ratings"]
        text = f"\n\n\n<b>üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç:</b>\n\n<b> ID:</b> {user_id}\n<b> –ò–º—è:</b> <code>{message.from_user.first_name}</code>\n<b> –†–µ–π—Ç–∏–Ω–≥ –≤ —á–∞—Ç–∞—Ö:</b> <code>+{ratings}</code>\n\n<b>üñ• –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<b>‚îú –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç:</b> <code>No</code><b>\n‚îú –û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{tokens}</code> —Ç–æ–∫–µ–Ω–æ–≤\n<b>‚îî –ú–æ–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> RUB\n\nüí≥ <b>–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:</b> /pay"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        await self.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode='HTML',
        ) 

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
    async def help_command_handler(self, message: types.Message):
        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if (settings_user["error"]):
            settings_user = settings_user["result"]
        else:
            return
        text = f"üÜò <code>{message.from_user.first_name}</code>, <b>–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>\n\n<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: 09:00-18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.</b>\n\n‚ö†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n\n–û–±—â–∏–π —á–∞—Ç: @infogrom_Forum.\n–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞:\n<b>–ò–º—è:</b> <code>{message.from_user.first_name}</code>\n<b>ID:</b> <code>{message.from_user.id}</code>\n\n–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤—Ç—å–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ü–æ–º–æ—â—å¬ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        support_button = types.InlineKeyboardButton(text="üÜò –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/InfoGrom_Forum/108")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        payment_keyboard = types.InlineKeyboardMarkup(row_width=1)
        payment_keyboard.add(support_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        await self.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode='HTML',
            reply_markup=payment_keyboard
        ) 
        
    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /pay
    async def pay_command_handler(self, message: types.Message):
        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if (settings_user["error"]):
            settings_user = settings_user["result"]
        else:
            return

        text = f"<b>üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –±–æ—Ç–∞:</b>\n\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—Å–∞–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ ¬´ChatGPT¬ª, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´üÜò –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É¬ª, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ò–º—è, –∏–ª–∏ @username, —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –ï—Å–ª–∏ —É –í–∞—Å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @IvanovGPT –∏ –º—ã —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º:"

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        payment_button_1 = types.InlineKeyboardButton(text="500 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 59 —Ä—É–±.", url="https://oplata.qiwi.com/form?invoiceUid=bbca21dd-ae7b-4acf-ad33-14b127906808&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot")
        payment_button_2 = types.InlineKeyboardButton(text="1000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 99 —Ä—É–±.", url="https://oplata.qiwi.com/form?invoiceUid=9087c35a-17a1-482f-91d7-294d59effe0c&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot")
        payment_button_3 = types.InlineKeyboardButton(text="2000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 199 —Ä—É–±.", url="https://oplata.qiwi.com/form?invoiceUid=fa13e3ff-dbab-4b3b-8d24-7ed6ebe7847e&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot")
        payment_button_4 = types.InlineKeyboardButton(text="5000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 499 —Ä—É–±.", url="https://oplata.qiwi.com/form?invoiceUid=e592f04a-a2ef-4a27-be59-9594d1159ac9&successUrl=https%3A%2F%2Ft.me%2FIvanovGPTbot")
        support_button = types.InlineKeyboardButton(text="üÜò –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/InfoGrom_Forum/108")



        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        payment_keyboard = types.InlineKeyboardMarkup(row_width=2)
        payment_keyboard.add(payment_button_1, payment_button_2, payment_button_3, payment_button_4)
        payment_keyboard.add(support_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        await self.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode='HTML',
            reply_markup=payment_keyboard
        ) 

    def GetUserSettings(self, userid):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid={userid}")
        if len(userdata) <= 0:
            return {"result": userdata, "error": False}
        else:
            return {"result": userdata, "error": True}

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async def echo_message(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name
        if not self.CheckUser(userid):
            self.RegisterUser(username, userid, firstname, lastname)

        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if (settings_user["error"]):
            settings_user = settings_user["result"]
        else:
            return

        ratings = settings_user ["ratings"]

        me = await self.bot.get_me()

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
        if rq in ['–°–ø–∞—Å–∏–±–æ', '+']:
            if message.reply_to_message and message.reply_to_message.from_user.username:
                # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
                #recipient_username = message.reply_to_message.from_user.username
                # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
                recipient_userid = message.reply_to_message.from_user.id
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                text = f"üëç <code>{username}</code> <b>–≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å! <code>({ratings})</code></b>"
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º HTML
                await self.bot.send_message(
                    chat_id=message.chat.id,
                    text=text,
                    reply_to_message_id=message.reply_to_message.message_id,
                    parse_mode='HTML'
                )

                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ratings –≤ —Ç–∞–±–ª–∏—Ü–µ settings –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 1
                self.database.query(f"UPDATE settings SET ratings=ratings+1 WHERE userid={recipient_userid}", commit=True)
                # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                print(f"({username} -> bot): {rq}\n(bot -> {username}): {username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!")
                return
            
        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –°—Å—ã–ª–∫—É:
        if message.text == '–°—Å—ã–ª–∫–∞':
            keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
            url_button = types.InlineKeyboardButton(text='‚úÖ –î–ê', url='https://t.me/IvanovGPTbot')
            delete_button = types.InlineKeyboardButton(text='‚ùå –ù–ï–¢', callback_data='delete')
            keyboard_markup.add(url_button, delete_button)
            await self.bot.send_message(
                chat_id=message.chat.id,
                text='‚Ü©Ô∏è –í—ã –∏—Å–∫–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ë–æ—Ç–∞?',
                reply_to_message_id=message.message_id,
                reply_markup=keyboard_markup
            )

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –ø–æ–º–æ—â—å:
        if message.text == '–ü–æ–º–æ—â—å':
            keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
            url_button = types.InlineKeyboardButton(text='‚úÖ –î–ê', url='https://t.me/InfoGrom_Forum/108')
            delete_button = types.InlineKeyboardButton(text='‚ùå –ù–ï–¢', callback_data='delete')
            keyboard_markup.add(url_button, delete_button)
            await self.bot.send_message(
                chat_id=message.chat.id,
                text='üÜò –í–∞–º —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?',
                reply_to_message_id=message.message_id,
                reply_markup=keyboard_markup
            )

        # –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò–≤–∞–Ω–æ–≤":
        if self.name_bot_command in rq:
            if self.CheckTokens(userid, rq):
                await self.bot.send_message(chat_id=message.chat.id,
                                            text="‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ...</b>",
                                            reply_to_message_id=message.message_id,
                                            parse_mode='HTML')
                # –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç":
                await self.bot.send_chat_action(chat_id=message.chat.id, action='typing')
                generated_text = self.chatgpt.getAnswer(message=rq.replace(self.name_bot_command, ''), lang="ru", max_tokens=1000, temperature=0., top_p=1, frequency_penalty=0, presence_penalty=0, engine_model="text-davinci-003")
                await self.bot.edit_message_text(chat_id=message.chat.id,
                                                text=generated_text["message"],
                                                message_id=message.message_id+1)
                print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): {generated_text['message']}")
            else:
                await self.bot.send_message(chat_id=message.chat.id, text=f"üî¥ –ò–∑–≤–∏–Ω–∏—Ç–µ <code>{message.from_user.first_name}</code>, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω... –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 100 –¥–µ–º–æ - —Ç–æ–∫–µ–Ω–æ–≤. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay", reply_to_message_id=message.message_id)
                print(f"(@{username} -> bot): {rq}\n(bot -> @{username}):üî¥ –ò–∑–≤–∏–Ω–∏—Ç–µ <code>{message.from_user.first_name}</code>, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω... –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 100 –¥–µ–º–æ - —Ç–æ–∫–µ–Ω–æ–≤. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay")
 
    def is_user_admin(self, user_id):
        try:
            userdata = self.database.query(f"SELECT * FROM users WHERE userid={user_id}")
            if len(userdata) > 0 and userdata['admin'] == 1:
                return True
            return False
        except:
            return False

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /test
    async def test_command_handler(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        user, money = message.get_args().split()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await self.bot.send_message(chat_id=message.chat.id, text=f"user = {user}\nmoney = {money}", reply_to_message_id=message_id)

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /admin
    async def admin_command_handler(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await self.bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_to_message_id=message_id, reply_markup=self.admin_buttons())

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    def admin_buttons(self):
        buttons = types.InlineKeyboardMarkup(row_width=2)
        buttons.add(
            types.InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏", callback_data='admin_give_money'),
            types.InlineKeyboardButton(text="üî∏ –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data='admin_add_tokens')
            )
        buttons.row(
            types.InlineKeyboardButton(text="üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_spam')
            )
        buttons.row(
            types.InlineKeyboardButton(text="‚ùå –ó–∞–±–∞–Ω–∏—Ç—å", callback_data='admin_ban'),
            types.InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data='admin_unban')
            )
        return buttons

    # –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ –¥–µ–Ω–µ–≥
    async def admin_give_money(self, call: types.CallbackQuery):
        await self.bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/money @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>", parse_mode='HTML')

    # –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ –¥–µ–Ω–µ–≥
    async def admin_add_tokens(self, call: types.CallbackQuery):
        await self.bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/money @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>", parse_mode='HTML')